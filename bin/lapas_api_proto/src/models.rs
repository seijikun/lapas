use chrono::{Utc, DateTime};
use tokio::io::{AsyncReadExt, AsyncWriteExt};

use crate::{ProtoSerde, LapasProtocolError};

#[derive(Debug, Clone)]
pub enum ApiAuth {
    /// Plaintext LAPAS administration password
    Password(String),
    /// Root Nonce meant for root-user login.
    /// This is an authentication password that is automatically generated by lapas-api-server at every startup.
    RootNonce(String)
}
#[async_trait::async_trait]
impl ProtoSerde for ApiAuth {
    async fn decode<R: AsyncReadExt + Send + Unpin>(reader: &mut R) -> Result<Self, LapasProtocolError> {
        let tag = reader.read_u8().await?;
        match tag {
            0 => Ok(ApiAuth::Password( String::decode(reader).await? )),
            1 => Ok(ApiAuth::RootNonce( String::decode(reader).await? )),
            _ => Err(LapasProtocolError::ProtocolError("Error while deserializing ApiPassword. Invalid Tag".to_owned()))
        }
    }
    async fn encode<W: AsyncWriteExt + Send + Unpin>(&self, writer: &mut W) -> Result<(), LapasProtocolError> {
        match self {
            ApiAuth::Password(password) => {
                writer.write_u8(0).await?;
                password.encode(writer).await?;
            },
            ApiAuth::RootNonce(password) => {
                writer.write_u8(1).await?;
                password.encode(writer).await?;
            }
        }
        Ok(())
    }
}


pub type UserId = u64;

#[derive(Clone, Debug)]
pub struct LapasUserPasswd {
    pub id: UserId,
    pub name: String
}
#[async_trait::async_trait]
impl ProtoSerde for LapasUserPasswd {
    async fn decode<R: AsyncReadExt + Send + Unpin>(reader: &mut R) -> Result<Self, LapasProtocolError> {
        Ok(LapasUserPasswd {
            id: u64::decode(reader).await?,
            name: String::decode(reader).await?
        })
    }
    async fn encode<W: AsyncWriteExt + Send + Unpin>(&self, writer: &mut W) -> Result<(), LapasProtocolError> {
        self.id.encode(writer).await?;
        self.name.encode(writer).await?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct LapasUserShadow {
    pub id: UserId,
    pub name: String,
    pub password_hash: String,
    pub last_update_ts: DateTime<Utc>
}
#[async_trait::async_trait]
impl ProtoSerde for LapasUserShadow {
    async fn decode<R: AsyncReadExt + Send + Unpin>(reader: &mut R) -> Result<Self, LapasProtocolError> {
        Ok(LapasUserShadow {
            id: u64::decode(reader).await?,
            name: String::decode(reader).await?,
            password_hash: String::decode(reader).await?,
            last_update_ts: DateTime::<Utc>::decode(reader).await?
        })
    }
    async fn encode<W: AsyncWriteExt + Send + Unpin>(&self, writer: &mut W) -> Result<(), LapasProtocolError> {
        self.id.encode(writer).await?;
        self.name.encode(writer).await?;
        self.password_hash.encode(writer).await?;
        self.last_update_ts.encode(writer).await?;
        Ok(())
    }
}